syntax = "proto3";
package api;

service Api {
    rpc create_prediction (CreatePredictionRequest) returns (GenericResponse);
    rpc get_prediction (GetPredictionRequest) returns (GetPredictionResponse);
    rpc accept_nomination (NostrEvent) returns (GenericResponse);
    rpc refuse_nomination (NostrEvent) returns (GenericResponse);
    rpc make_decision (NostrEvent) returns (GenericResponse);
    rpc add_bet (AddBetRequest) returns (Invoice);
//    rpc cancel_bets;
//    rpc refund;
//    rpc cash_out_user;
//    rpc cash_out_judge;
//    rpc get_prediction_bets_user;
}

message GenericResponse {
    string message = 1;
}

message CreatePredictionRequest {
    string id = 1;
    string prediction = 2;
    uint32 judge_share_ppm = 3;
    uint32 judge_count = 4;
    string trading_end = 5;
    uint32 decision_period_seconds = 6;
    repeated string judges = 7;
}

message GetPredictionRequest {
    string id = 1;
}

message GetPredictionResponse {
    MarketState state = 1;
    string prediction = 2;
    float judge_share_ppm = 3;
    uint32 judge_count = 4;
    string trading_end = 5;
    uint32 decision_period_seconds = 6;
    repeated string judges = 7;
    uint32 bets_true = 8;
    uint32 bets_false = 9;
    optional bool outcome = 10;
}
enum MarketState {
    WaitingForJudges = 0;
    Trading = 1;
    TradingStop = 2;
    WaitingForDecision = 3;
    Resolved = 4;
    Refunded = 5;
}

message Judge {
    string pubkey = 1;
    optional JudgeStatus status = 2;
    optional bool decision = 3;
}

enum JudgeStatus {
    Nominated = 0;
    Accepted = 1;
    Refused = 2;
    Decided = 3;
}

message AddBetRequest {
    string user_pub_key = 1;
    string prediction_id = 2;
    bool bet = 3;
    optional uint32 amount = 4;
}

message Invoice {
    string invoice = 1;
}

message NostrEvent {
    string id = 1;
    string pubkey = 2;
    uint64 created_at = 3;
    string content = 6;
    string sig = 7;
}
